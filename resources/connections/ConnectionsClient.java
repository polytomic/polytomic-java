/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.connections;

import core.ApiError;
import core.ClientOptions;
import core.ObjectMappers;
import core.RequestOptions;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.RuntimeException;
import java.lang.String;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import resources.connections.requests.ApiV2GetConnectionTargetRequest;
import resources.connections.requests.ApiV2RemoveConnectionRequest;
import resources.connections.requests.V2CreateConnectionRequestSchema;
import resources.connections.requests.V2ModelFieldsRequest;
import resources.connections.requests.V2TargetRequest;
import resources.connections.requests.V2UpdateConnectionRequestSchema;
import resources.connections.requests.V3ConnectCardRequest;
import types.V2ConnectionListResponseEnvelope;
import types.V2ConnectionResponseEnvelope;
import types.V2ConnectionTypeResponseEnvelope;
import types.V2CreateConnectionResponseEnvelope;
import types.V2GetConnectionMetaEnvelope;
import types.V2ModelFieldResponse;
import types.V2TargetResponseEnvelope;
import types.V3ConnectCardResponseEnvelope;

public class ConnectionsClient {
  protected final ClientOptions clientOptions;

  public ConnectionsClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  public V2ConnectionTypeResponseEnvelope apiV2GetConnectionTypes(RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("api/connection_types")
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    try {
      Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2ConnectionTypeResponseEnvelope.class);
      }
      throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
    }
    catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public V2ConnectionTypeResponseEnvelope apiV2GetConnectionTypes() {
    return apiV2GetConnectionTypes(null);
  }

  public V2ConnectionListResponseEnvelope apiV2ListConnections(RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("api/connections")
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    try {
      Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2ConnectionListResponseEnvelope.class);
      }
      throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
    }
    catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public V2ConnectionListResponseEnvelope apiV2ListConnections() {
    return apiV2ListConnections(null);
  }

  public V2CreateConnectionResponseEnvelope apiV2CreateConnection(
      V2CreateConnectionRequestSchema request, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("api/connections")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    try {
      Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2CreateConnectionResponseEnvelope.class);
      }
      throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
    }
    catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public V2CreateConnectionResponseEnvelope apiV2CreateConnection(
      V2CreateConnectionRequestSchema request) {
    return apiV2CreateConnection(request,null);
  }

  public V3ConnectCardResponseEnvelope apiV3Connect(V3ConnectCardRequest request,
      RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("api/connections/connect")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    try {
      Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V3ConnectCardResponseEnvelope.class);
      }
      throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
    }
    catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public V3ConnectCardResponseEnvelope apiV3Connect(V3ConnectCardRequest request) {
    return apiV3Connect(request,null);
  }

  public V2ConnectionResponseEnvelope apiV2GetConnection(String id, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("api/connections")
      .addPathSegment(id)
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    try {
      Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2ConnectionResponseEnvelope.class);
      }
      throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
    }
    catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public V2ConnectionResponseEnvelope apiV2GetConnection(String id) {
    return apiV2GetConnection(id,null);
  }

  public void apiV2RemoveConnection(String id) {
    apiV2RemoveConnection(id,ApiV2RemoveConnectionRequest.builder().build());
  }

  public void apiV2RemoveConnection(String id, ApiV2RemoveConnectionRequest request,
      RequestOptions requestOptions) {
    HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("api/connections")
      .addPathSegment(id);if (request.getForce().isPresent()) {
        httpUrl.addQueryParameter("force", request.getForce().get().toString());
      }
      Request.Builder _requestBuilder = new Request.Builder()
        .url(httpUrl.build())
        .method("DELETE", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)));
      Request okhttpRequest = _requestBuilder.build();
      try {
        Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
        if (response.isSuccessful()) {
          return;
        }
        throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
      }
      catch (IOException e) {
        throw new RuntimeException(e);
      }
    }

    public void apiV2RemoveConnection(String id, ApiV2RemoveConnectionRequest request) {
      apiV2RemoveConnection(id,request,null);
    }

    public V2CreateConnectionResponseEnvelope apiV2UpdateConnection(String id,
        V2UpdateConnectionRequestSchema request, RequestOptions requestOptions) {
      HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("api/connections")
        .addPathSegment(id)
        .build();
      RequestBody body;
      try {
        body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
      }
      catch(Exception e) {
        throw new RuntimeException(e);
      }
      Request okhttpRequest = new Request.Builder()
        .url(httpUrl)
        .method("PATCH", body)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json")
        .build();
      try {
        Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
        if (response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2CreateConnectionResponseEnvelope.class);
        }
        throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
      }
      catch (IOException e) {
        throw new RuntimeException(e);
      }
    }

    public V2CreateConnectionResponseEnvelope apiV2UpdateConnection(String id,
        V2UpdateConnectionRequestSchema request) {
      return apiV2UpdateConnection(id,request,null);
    }

    public V2GetConnectionMetaEnvelope apiV2GetConnectionSource(String id,
        RequestOptions requestOptions) {
      HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("api/connections")
        .addPathSegment(id)
        .addPathSegments("source")
        .build();
      Request okhttpRequest = new Request.Builder()
        .url(httpUrl)
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json")
        .build();
      try {
        Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
        if (response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2GetConnectionMetaEnvelope.class);
        }
        throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
      }
      catch (IOException e) {
        throw new RuntimeException(e);
      }
    }

    public V2GetConnectionMetaEnvelope apiV2GetConnectionSource(String id) {
      return apiV2GetConnectionSource(id,null);
    }

    public V2ModelFieldResponse apiV2GetConnectionSourceFields(String id) {
      return apiV2GetConnectionSourceFields(id,V2ModelFieldsRequest.builder().build());
    }

    public V2ModelFieldResponse apiV2GetConnectionSourceFields(String id,
        V2ModelFieldsRequest request, RequestOptions requestOptions) {
      HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("api/connections")
        .addPathSegment(id)
        .addPathSegments("source/fields")
        .build();
      RequestBody body;
      try {
        body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
      }
      catch(Exception e) {
        throw new RuntimeException(e);
      }
      Request okhttpRequest = new Request.Builder()
        .url(httpUrl)
        .method("POST", body)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json")
        .build();
      try {
        Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
        if (response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2ModelFieldResponse.class);
        }
        throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
      }
      catch (IOException e) {
        throw new RuntimeException(e);
      }
    }

    public V2ModelFieldResponse apiV2GetConnectionSourceFields(String id,
        V2ModelFieldsRequest request) {
      return apiV2GetConnectionSourceFields(id,request,null);
    }

    public V2GetConnectionMetaEnvelope apiV2GetConnectionTarget(String id) {
      return apiV2GetConnectionTarget(id,ApiV2GetConnectionTargetRequest.builder().build());
    }

    public V2GetConnectionMetaEnvelope apiV2GetConnectionTarget(String id,
        ApiV2GetConnectionTargetRequest request, RequestOptions requestOptions) {
      HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("api/connections")
        .addPathSegment(id)
        .addPathSegments("target");if (request.getType().isPresent()) {
          httpUrl.addQueryParameter("type", request.getType().get());
        }
        if (request.getSearch().isPresent()) {
          httpUrl.addQueryParameter("search", request.getSearch().get());
        }
        Request.Builder _requestBuilder = new Request.Builder()
          .url(httpUrl.build())
          .method("GET", null)
          .headers(Headers.of(clientOptions.headers(requestOptions)))
          .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
          Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
          if (response.isSuccessful()) {
            return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2GetConnectionMetaEnvelope.class);
          }
          throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        }
        catch (IOException e) {
          throw new RuntimeException(e);
        }
      }

      public V2GetConnectionMetaEnvelope apiV2GetConnectionTarget(String id,
          ApiV2GetConnectionTargetRequest request) {
        return apiV2GetConnectionTarget(id,request,null);
      }

      public V2TargetResponseEnvelope apiV2GetConnectionTargetFields(String id,
          V2TargetRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

          .addPathSegments("api/connections")
          .addPathSegment(id)
          .addPathSegments("target/fields")
          .build();
        RequestBody body;
        try {
          body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
        }
        catch(Exception e) {
          throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
          .url(httpUrl)
          .method("POST", body)
          .headers(Headers.of(clientOptions.headers(requestOptions)))
          .addHeader("Content-Type", "application/json")
          .build();
        try {
          Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
          if (response.isSuccessful()) {
            return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2TargetResponseEnvelope.class);
          }
          throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        }
        catch (IOException e) {
          throw new RuntimeException(e);
        }
      }

      public V2TargetResponseEnvelope apiV2GetConnectionTargetFields(String id,
          V2TargetRequest request) {
        return apiV2GetConnectionTargetFields(id,request,null);
      }
    }
