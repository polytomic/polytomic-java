/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.users;

import core.ApiError;
import core.ClientOptions;
import core.ObjectMappers;
import core.RequestOptions;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.RuntimeException;
import java.lang.String;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import resources.users.requests.ApiV2CreateApiKeyRequest;
import resources.users.requests.V2CreateUserRequestSchema;
import resources.users.requests.V2UpdateUserRequestSchema;
import types.V2ApiKeyResponseEnvelope;
import types.V2ListUsersEnvelope;
import types.V2UserEnvelope;

public class UsersClient {
  protected final ClientOptions clientOptions;

  public UsersClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  /**
   * <blockquote>
   * ðŸš§ Requires partner key
   * <p>User endpoints are only accessible using <a href="https://docs.polytomic.com/reference/authentication#partner-keys">partner keys</a></p>
   * </blockquote>
   */
  public V2ListUsersEnvelope apiV2ListUsers(String orgId, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("api/organizations")
      .addPathSegment(orgId)
      .addPathSegments("users")
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    try {
      Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2ListUsersEnvelope.class);
      }
      throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
    }
    catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * <blockquote>
   * ðŸš§ Requires partner key
   * <p>User endpoints are only accessible using <a href="https://docs.polytomic.com/reference/authentication#partner-keys">partner keys</a></p>
   * </blockquote>
   */
  public V2ListUsersEnvelope apiV2ListUsers(String orgId) {
    return apiV2ListUsers(orgId,null);
  }

  /**
   * <blockquote>
   * ðŸš§ Requires partner key
   * <p>User endpoints are only accessible using <a href="https://docs.polytomic.com/reference/authentication#partner-keys">partner keys</a></p>
   * </blockquote>
   */
  public V2UserEnvelope apiV2CreateUser(String orgId, V2CreateUserRequestSchema request,
      RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("api/organizations")
      .addPathSegment(orgId)
      .addPathSegments("users")
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("POST", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    try {
      Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2UserEnvelope.class);
      }
      throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
    }
    catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * <blockquote>
   * ðŸš§ Requires partner key
   * <p>User endpoints are only accessible using <a href="https://docs.polytomic.com/reference/authentication#partner-keys">partner keys</a></p>
   * </blockquote>
   */
  public V2UserEnvelope apiV2CreateUser(String orgId, V2CreateUserRequestSchema request) {
    return apiV2CreateUser(orgId,request,null);
  }

  /**
   * <blockquote>
   * ðŸš§ Requires partner key
   * <p>User endpoints are only accessible using <a href="https://docs.polytomic.com/reference/authentication#partner-keys">partner keys</a></p>
   * </blockquote>
   */
  public V2UserEnvelope apiV2GetUser(String id, String orgId, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("api/organizations")
      .addPathSegment(orgId)
      .addPathSegments("users")
      .addPathSegment(id)
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    try {
      Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2UserEnvelope.class);
      }
      throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
    }
    catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * <blockquote>
   * ðŸš§ Requires partner key
   * <p>User endpoints are only accessible using <a href="https://docs.polytomic.com/reference/authentication#partner-keys">partner keys</a></p>
   * </blockquote>
   */
  public V2UserEnvelope apiV2GetUser(String id, String orgId) {
    return apiV2GetUser(id,orgId,null);
  }

  /**
   * <blockquote>
   * ðŸš§ Requires partner key
   * <p>User endpoints are only accessible using <a href="https://docs.polytomic.com/reference/authentication#partner-keys">partner keys</a></p>
   * </blockquote>
   */
  public V2UserEnvelope apiV2RemoveUser(String id, String orgId, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("api/organizations")
      .addPathSegment(orgId)
      .addPathSegments("users")
      .addPathSegment(id)
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("DELETE", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    try {
      Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2UserEnvelope.class);
      }
      throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
    }
    catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * <blockquote>
   * ðŸš§ Requires partner key
   * <p>User endpoints are only accessible using <a href="https://docs.polytomic.com/reference/authentication#partner-keys">partner keys</a></p>
   * </blockquote>
   */
  public V2UserEnvelope apiV2RemoveUser(String id, String orgId) {
    return apiV2RemoveUser(id,orgId,null);
  }

  /**
   * <blockquote>
   * ðŸš§ Requires partner key
   * <p>User endpoints are only accessible using <a href="https://docs.polytomic.com/reference/authentication#partner-keys">partner keys</a></p>
   * </blockquote>
   */
  public V2UserEnvelope apiV2UpdateUser(String id, String orgId, V2UpdateUserRequestSchema request,
      RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("api/organizations")
      .addPathSegment(orgId)
      .addPathSegments("users")
      .addPathSegment(id)
      .build();
    RequestBody body;
    try {
      body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("PATCH", body)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    try {
      Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2UserEnvelope.class);
      }
      throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
    }
    catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * <blockquote>
   * ðŸš§ Requires partner key
   * <p>User endpoints are only accessible using <a href="https://docs.polytomic.com/reference/authentication#partner-keys">partner keys</a></p>
   * </blockquote>
   */
  public V2UserEnvelope apiV2UpdateUser(String id, String orgId,
      V2UpdateUserRequestSchema request) {
    return apiV2UpdateUser(id,orgId,request,null);
  }

  /**
   * <blockquote>
   * ðŸš§ Requires partner key
   * <p>User endpoints are only accessible using <a href="https://docs.polytomic.com/reference/authentication#partner-keys">partner keys</a></p>
   * </blockquote>
   */
  public V2ApiKeyResponseEnvelope apiV2CreateApiKey(String orgId, String id) {
    return apiV2CreateApiKey(orgId,id,ApiV2CreateApiKeyRequest.builder().build());
  }

  /**
   * <blockquote>
   * ðŸš§ Requires partner key
   * <p>User endpoints are only accessible using <a href="https://docs.polytomic.com/reference/authentication#partner-keys">partner keys</a></p>
   * </blockquote>
   */
  public V2ApiKeyResponseEnvelope apiV2CreateApiKey(String orgId, String id,
      ApiV2CreateApiKeyRequest request, RequestOptions requestOptions) {
    HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("api/organizations")
      .addPathSegment(orgId)
      .addPathSegments("users")
      .addPathSegment(id)
      .addPathSegments("keys");if (request.getForce().isPresent()) {
        httpUrl.addQueryParameter("force", request.getForce().get().toString());
      }
      Request.Builder _requestBuilder = new Request.Builder()
        .url(httpUrl.build())
        .method("POST", RequestBody.create("", null))
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json");
      Request okhttpRequest = _requestBuilder.build();
      try {
        Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
        if (response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2ApiKeyResponseEnvelope.class);
        }
        throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
      }
      catch (IOException e) {
        throw new RuntimeException(e);
      }
    }

    /**
     * <blockquote>
     * ðŸš§ Requires partner key
     * <p>User endpoints are only accessible using <a href="https://docs.polytomic.com/reference/authentication#partner-keys">partner keys</a></p>
     * </blockquote>
     */
    public V2ApiKeyResponseEnvelope apiV2CreateApiKey(String orgId, String id,
        ApiV2CreateApiKeyRequest request) {
      return apiV2CreateApiKey(orgId,id,request,null);
    }
  }
