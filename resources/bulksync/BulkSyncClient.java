/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.bulksync;

import core.ApiError;
import core.ClientOptions;
import core.ObjectMappers;
import core.RequestOptions;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.RuntimeException;
import java.lang.String;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import resources.bulksync.requests.ApiV2GetBulkSyncRequest;
import resources.bulksync.requests.ApiV2RemoveBulkSyncRequest;
import resources.bulksync.requests.ApiV3GetBulkSourceRequest;
import resources.bulksync.requests.V2CreateBulkSyncRequest;
import resources.bulksync.requests.V2UpdateBulkSyncRequest;
import resources.bulksync.requests.V3BulkSyncSchemasRequest;
import resources.bulksync.requests.V3StartBulkSyncRequest;
import resources.bulksync.requests.V3UpdateBulkSchema;
import types.V2ActivateSyncEnvelope;
import types.V2ActivateSyncInput;
import types.V2BulkSyncDestEnvelope;
import types.V2BulkSyncListEnvelope;
import types.V2BulkSyncResponseEnvelope;
import types.V3BulkSchemaEnvelope;
import types.V3BulkSyncExecutionEnvelope;
import types.V3BulkSyncSourceEnvelope;
import types.V3BulkSyncSourceSchemaEnvelope;
import types.V3BulkSyncStatusEnvelope;
import types.V3ListBulkSchemaEnvelope;
import types.V3ListBulkSyncExecutionsEnvelope;

public class BulkSyncClient {
  protected final ClientOptions clientOptions;

  public BulkSyncClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  public V2BulkSyncDestEnvelope apiV2GetBulkDestination(String id, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("api/bulk/dest")
      .addPathSegment(id)
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .build();
    try {
      Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2BulkSyncDestEnvelope.class);
      }
      throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
    }
    catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public V2BulkSyncDestEnvelope apiV2GetBulkDestination(String id) {
    return apiV2GetBulkDestination(id,null);
  }

  public V3BulkSyncSourceEnvelope apiV3GetBulkSource(String connectionId) {
    return apiV3GetBulkSource(connectionId,ApiV3GetBulkSourceRequest.builder().build());
  }

  public V3BulkSyncSourceEnvelope apiV3GetBulkSource(String connectionId,
      ApiV3GetBulkSourceRequest request, RequestOptions requestOptions) {
    HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("api/bulk/source")
      .addPathSegment(connectionId);if (request.getRefreshSchemas().isPresent()) {
        httpUrl.addQueryParameter("refresh_schemas", request.getRefreshSchemas().get().toString());
      }
      Request.Builder _requestBuilder = new Request.Builder()
        .url(httpUrl.build())
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json");
      Request okhttpRequest = _requestBuilder.build();
      try {
        Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
        if (response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V3BulkSyncSourceEnvelope.class);
        }
        throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
      }
      catch (IOException e) {
        throw new RuntimeException(e);
      }
    }

    public V3BulkSyncSourceEnvelope apiV3GetBulkSource(String connectionId,
        ApiV3GetBulkSourceRequest request) {
      return apiV3GetBulkSource(connectionId,request,null);
    }

    public V3BulkSyncSourceSchemaEnvelope apiV3GetBulkSourceSchema(String connectionId,
        String schemaId, RequestOptions requestOptions) {
      HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("api/bulk/source")
        .addPathSegment(connectionId)
        .addPathSegments("schema")
        .addPathSegment(schemaId)
        .build();
      Request okhttpRequest = new Request.Builder()
        .url(httpUrl)
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json")
        .build();
      try {
        Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
        if (response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V3BulkSyncSourceSchemaEnvelope.class);
        }
        throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
      }
      catch (IOException e) {
        throw new RuntimeException(e);
      }
    }

    public V3BulkSyncSourceSchemaEnvelope apiV3GetBulkSourceSchema(String connectionId,
        String schemaId) {
      return apiV3GetBulkSourceSchema(connectionId,schemaId,null);
    }

    public V2BulkSyncListEnvelope apiV2ListBulkSyncs(RequestOptions requestOptions) {
      HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("api/bulk/syncs")
        .build();
      Request okhttpRequest = new Request.Builder()
        .url(httpUrl)
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json")
        .build();
      try {
        Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
        if (response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2BulkSyncListEnvelope.class);
        }
        throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
      }
      catch (IOException e) {
        throw new RuntimeException(e);
      }
    }

    public V2BulkSyncListEnvelope apiV2ListBulkSyncs() {
      return apiV2ListBulkSyncs(null);
    }

    public V2BulkSyncResponseEnvelope apiV2CreateBulkSync(V2CreateBulkSyncRequest request,
        RequestOptions requestOptions) {
      HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("api/bulk/syncs")
        .build();
      RequestBody body;
      try {
        body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
      }
      catch(Exception e) {
        throw new RuntimeException(e);
      }
      Request okhttpRequest = new Request.Builder()
        .url(httpUrl)
        .method("POST", body)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json")
        .build();
      try {
        Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
        if (response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2BulkSyncResponseEnvelope.class);
        }
        throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
      }
      catch (IOException e) {
        throw new RuntimeException(e);
      }
    }

    public V2BulkSyncResponseEnvelope apiV2CreateBulkSync(V2CreateBulkSyncRequest request) {
      return apiV2CreateBulkSync(request,null);
    }

    public V2BulkSyncResponseEnvelope apiV2GetBulkSync(String id) {
      return apiV2GetBulkSync(id,ApiV2GetBulkSyncRequest.builder().build());
    }

    public V2BulkSyncResponseEnvelope apiV2GetBulkSync(String id, ApiV2GetBulkSyncRequest request,
        RequestOptions requestOptions) {
      HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("api/bulk/syncs")
        .addPathSegment(id);if (request.getRefreshSchemas().isPresent()) {
          httpUrl.addQueryParameter("refresh_schemas", request.getRefreshSchemas().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
          .url(httpUrl.build())
          .method("GET", null)
          .headers(Headers.of(clientOptions.headers(requestOptions)))
          .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
          Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
          if (response.isSuccessful()) {
            return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2BulkSyncResponseEnvelope.class);
          }
          throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        }
        catch (IOException e) {
          throw new RuntimeException(e);
        }
      }

      public V2BulkSyncResponseEnvelope apiV2GetBulkSync(String id,
          ApiV2GetBulkSyncRequest request) {
        return apiV2GetBulkSync(id,request,null);
      }

      public void apiV2RemoveBulkSync(String id) {
        apiV2RemoveBulkSync(id,ApiV2RemoveBulkSyncRequest.builder().build());
      }

      public void apiV2RemoveBulkSync(String id, ApiV2RemoveBulkSyncRequest request,
          RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

          .addPathSegments("api/bulk/syncs")
          .addPathSegment(id);if (request.getRefreshSchemas().isPresent()) {
            httpUrl.addQueryParameter("refresh_schemas", request.getRefreshSchemas().get().toString());
          }
          Request.Builder _requestBuilder = new Request.Builder()
            .url(httpUrl.build())
            .method("DELETE", null)
            .headers(Headers.of(clientOptions.headers(requestOptions)));
          Request okhttpRequest = _requestBuilder.build();
          try {
            Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
              return;
            }
            throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
          }
          catch (IOException e) {
            throw new RuntimeException(e);
          }
        }

        public void apiV2RemoveBulkSync(String id, ApiV2RemoveBulkSyncRequest request) {
          apiV2RemoveBulkSync(id,request,null);
        }

        /**
         * <blockquote>
         * 📘 Updating schemas
         * <p>Schema updates can be performed using the <a href="https://docs.polytomic.com/reference/apiv3updatebulksyncschemas">Update Bulk Sync Schemas</a> endpoint.</p>
         * </blockquote>
         */
        public V2BulkSyncResponseEnvelope apiV2UpdateBulkSync(String id,
            V2UpdateBulkSyncRequest request, RequestOptions requestOptions) {
          HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

            .addPathSegments("api/bulk/syncs")
            .addPathSegment(id)
            .build();
          RequestBody body;
          try {
            body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
          }
          catch(Exception e) {
            throw new RuntimeException(e);
          }
          Request okhttpRequest = new Request.Builder()
            .url(httpUrl)
            .method("PATCH", body)
            .headers(Headers.of(clientOptions.headers(requestOptions)))
            .addHeader("Content-Type", "application/json")
            .build();
          try {
            Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
              return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2BulkSyncResponseEnvelope.class);
            }
            throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
          }
          catch (IOException e) {
            throw new RuntimeException(e);
          }
        }

        /**
         * <blockquote>
         * 📘 Updating schemas
         * <p>Schema updates can be performed using the <a href="https://docs.polytomic.com/reference/apiv3updatebulksyncschemas">Update Bulk Sync Schemas</a> endpoint.</p>
         * </blockquote>
         */
        public V2BulkSyncResponseEnvelope apiV2UpdateBulkSync(String id,
            V2UpdateBulkSyncRequest request) {
          return apiV2UpdateBulkSync(id,request,null);
        }

        public V2ActivateSyncEnvelope apiV2ActivateBulkSync(String id, V2ActivateSyncInput request,
            RequestOptions requestOptions) {
          HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

            .addPathSegments("api/bulk/syncs")
            .addPathSegment(id)
            .addPathSegments("activate")
            .build();
          RequestBody body;
          try {
            body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
          }
          catch(Exception e) {
            throw new RuntimeException(e);
          }
          Request okhttpRequest = new Request.Builder()
            .url(httpUrl)
            .method("POST", body)
            .headers(Headers.of(clientOptions.headers(requestOptions)))
            .addHeader("Content-Type", "application/json")
            .build();
          try {
            Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
              return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V2ActivateSyncEnvelope.class);
            }
            throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
          }
          catch (IOException e) {
            throw new RuntimeException(e);
          }
        }

        public V2ActivateSyncEnvelope apiV2ActivateBulkSync(String id,
            V2ActivateSyncInput request) {
          return apiV2ActivateBulkSync(id,request,null);
        }

        public V3ListBulkSyncExecutionsEnvelope apiV3ListBulkSyncExecutions(String id,
            RequestOptions requestOptions) {
          HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

            .addPathSegments("api/bulk/syncs")
            .addPathSegment(id)
            .addPathSegments("executions")
            .build();
          Request okhttpRequest = new Request.Builder()
            .url(httpUrl)
            .method("GET", null)
            .headers(Headers.of(clientOptions.headers(requestOptions)))
            .addHeader("Content-Type", "application/json")
            .build();
          try {
            Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
              return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V3ListBulkSyncExecutionsEnvelope.class);
            }
            throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
          }
          catch (IOException e) {
            throw new RuntimeException(e);
          }
        }

        public V3ListBulkSyncExecutionsEnvelope apiV3ListBulkSyncExecutions(String id) {
          return apiV3ListBulkSyncExecutions(id,null);
        }

        public V3BulkSyncExecutionEnvelope apiV3StartBulkSyncExecution(String id) {
          return apiV3StartBulkSyncExecution(id,V3StartBulkSyncRequest.builder().build());
        }

        public V3BulkSyncExecutionEnvelope apiV3StartBulkSyncExecution(String id,
            V3StartBulkSyncRequest request, RequestOptions requestOptions) {
          HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

            .addPathSegments("api/bulk/syncs")
            .addPathSegment(id)
            .addPathSegments("executions")
            .build();
          RequestBody body;
          try {
            body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
          }
          catch(Exception e) {
            throw new RuntimeException(e);
          }
          Request okhttpRequest = new Request.Builder()
            .url(httpUrl)
            .method("POST", body)
            .headers(Headers.of(clientOptions.headers(requestOptions)))
            .addHeader("Content-Type", "application/json")
            .build();
          try {
            Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
              return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V3BulkSyncExecutionEnvelope.class);
            }
            throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
          }
          catch (IOException e) {
            throw new RuntimeException(e);
          }
        }

        public V3BulkSyncExecutionEnvelope apiV3StartBulkSyncExecution(String id,
            V3StartBulkSyncRequest request) {
          return apiV3StartBulkSyncExecution(id,request,null);
        }

        public V3BulkSyncExecutionEnvelope apiV3GetBulkSyncExecution(String id, String execId,
            RequestOptions requestOptions) {
          HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

            .addPathSegments("api/bulk/syncs")
            .addPathSegment(id)
            .addPathSegments("executions")
            .addPathSegment(execId)
            .build();
          Request okhttpRequest = new Request.Builder()
            .url(httpUrl)
            .method("GET", null)
            .headers(Headers.of(clientOptions.headers(requestOptions)))
            .addHeader("Content-Type", "application/json")
            .build();
          try {
            Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
              return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V3BulkSyncExecutionEnvelope.class);
            }
            throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
          }
          catch (IOException e) {
            throw new RuntimeException(e);
          }
        }

        public V3BulkSyncExecutionEnvelope apiV3GetBulkSyncExecution(String id, String execId) {
          return apiV3GetBulkSyncExecution(id,execId,null);
        }

        public V3ListBulkSchemaEnvelope apiV3GetBulkSyncSchemas(String id,
            RequestOptions requestOptions) {
          HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

            .addPathSegments("api/bulk/syncs")
            .addPathSegment(id)
            .addPathSegments("schemas")
            .build();
          Request okhttpRequest = new Request.Builder()
            .url(httpUrl)
            .method("GET", null)
            .headers(Headers.of(clientOptions.headers(requestOptions)))
            .addHeader("Content-Type", "application/json")
            .build();
          try {
            Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
              return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V3ListBulkSchemaEnvelope.class);
            }
            throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
          }
          catch (IOException e) {
            throw new RuntimeException(e);
          }
        }

        public V3ListBulkSchemaEnvelope apiV3GetBulkSyncSchemas(String id) {
          return apiV3GetBulkSyncSchemas(id,null);
        }

        public V3ListBulkSchemaEnvelope apiV3UpdateBulkSyncSchemas(String id) {
          return apiV3UpdateBulkSyncSchemas(id,V3BulkSyncSchemasRequest.builder().build());
        }

        public V3ListBulkSchemaEnvelope apiV3UpdateBulkSyncSchemas(String id,
            V3BulkSyncSchemasRequest request, RequestOptions requestOptions) {
          HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

            .addPathSegments("api/bulk/syncs")
            .addPathSegment(id)
            .addPathSegments("schemas")
            .build();
          RequestBody body;
          try {
            body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
          }
          catch(Exception e) {
            throw new RuntimeException(e);
          }
          Request okhttpRequest = new Request.Builder()
            .url(httpUrl)
            .method("PATCH", body)
            .headers(Headers.of(clientOptions.headers(requestOptions)))
            .addHeader("Content-Type", "application/json")
            .build();
          try {
            Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
              return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V3ListBulkSchemaEnvelope.class);
            }
            throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
          }
          catch (IOException e) {
            throw new RuntimeException(e);
          }
        }

        public V3ListBulkSchemaEnvelope apiV3UpdateBulkSyncSchemas(String id,
            V3BulkSyncSchemasRequest request) {
          return apiV3UpdateBulkSyncSchemas(id,request,null);
        }

        public V3BulkSchemaEnvelope apiV3GetBulkSyncSchema(String id, String schemaId,
            RequestOptions requestOptions) {
          HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

            .addPathSegments("api/bulk/syncs")
            .addPathSegment(id)
            .addPathSegments("schemas")
            .addPathSegment(schemaId)
            .build();
          Request okhttpRequest = new Request.Builder()
            .url(httpUrl)
            .method("GET", null)
            .headers(Headers.of(clientOptions.headers(requestOptions)))
            .addHeader("Content-Type", "application/json")
            .build();
          try {
            Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
              return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V3BulkSchemaEnvelope.class);
            }
            throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
          }
          catch (IOException e) {
            throw new RuntimeException(e);
          }
        }

        public V3BulkSchemaEnvelope apiV3GetBulkSyncSchema(String id, String schemaId) {
          return apiV3GetBulkSyncSchema(id,schemaId,null);
        }

        public V3BulkSchemaEnvelope apiV3UpdateBulkSyncSchema(String id, String schemaId) {
          return apiV3UpdateBulkSyncSchema(id,schemaId,V3UpdateBulkSchema.builder().build());
        }

        public V3BulkSchemaEnvelope apiV3UpdateBulkSyncSchema(String id, String schemaId,
            V3UpdateBulkSchema request, RequestOptions requestOptions) {
          HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

            .addPathSegments("api/bulk/syncs")
            .addPathSegment(id)
            .addPathSegments("schemas")
            .addPathSegment(schemaId)
            .build();
          RequestBody body;
          try {
            body = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
          }
          catch(Exception e) {
            throw new RuntimeException(e);
          }
          Request okhttpRequest = new Request.Builder()
            .url(httpUrl)
            .method("PATCH", body)
            .headers(Headers.of(clientOptions.headers(requestOptions)))
            .addHeader("Content-Type", "application/json")
            .build();
          try {
            Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
              return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V3BulkSchemaEnvelope.class);
            }
            throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
          }
          catch (IOException e) {
            throw new RuntimeException(e);
          }
        }

        public V3BulkSchemaEnvelope apiV3UpdateBulkSyncSchema(String id, String schemaId,
            V3UpdateBulkSchema request) {
          return apiV3UpdateBulkSyncSchema(id,schemaId,request,null);
        }

        public V3BulkSyncStatusEnvelope apiV3GetBulkSyncStatus(String id,
            RequestOptions requestOptions) {
          HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

            .addPathSegments("api/bulk/syncs")
            .addPathSegment(id)
            .addPathSegments("status")
            .build();
          Request okhttpRequest = new Request.Builder()
            .url(httpUrl)
            .method("GET", null)
            .headers(Headers.of(clientOptions.headers(requestOptions)))
            .addHeader("Content-Type", "application/json")
            .build();
          try {
            Response response = clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
              return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V3BulkSyncStatusEnvelope.class);
            }
            throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
          }
          catch (IOException e) {
            throw new RuntimeException(e);
          }
        }

        public V3BulkSyncStatusEnvelope apiV3GetBulkSyncStatus(String id) {
          return apiV3GetBulkSyncStatus(id,null);
        }
      }
