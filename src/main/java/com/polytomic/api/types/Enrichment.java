/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.polytomic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Enrichment.Builder.class)
public final class Enrichment {
    private final Optional<Map<String, Object>> configuration;

    private final Optional<String> connectionId;

    private final Optional<String> enricherId;

    private final Optional<List<ModelField>> fields;

    private final Optional<Map<String, String>> mappings;

    private final Map<String, Object> additionalProperties;

    private Enrichment(
            Optional<Map<String, Object>> configuration,
            Optional<String> connectionId,
            Optional<String> enricherId,
            Optional<List<ModelField>> fields,
            Optional<Map<String, String>> mappings,
            Map<String, Object> additionalProperties) {
        this.configuration = configuration;
        this.connectionId = connectionId;
        this.enricherId = enricherId;
        this.fields = fields;
        this.mappings = mappings;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("configuration")
    public Optional<Map<String, Object>> getConfiguration() {
        return configuration;
    }

    @JsonProperty("connection_id")
    public Optional<String> getConnectionId() {
        return connectionId;
    }

    /**
     * @return Must be provided to update an existing enrichment
     */
    @JsonProperty("enricher_id")
    public Optional<String> getEnricherId() {
        return enricherId;
    }

    /**
     * @return If not provided, all fields will be enabled.
     */
    @JsonProperty("fields")
    public Optional<List<ModelField>> getFields() {
        return fields;
    }

    @JsonProperty("mappings")
    public Optional<Map<String, String>> getMappings() {
        return mappings;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Enrichment && equalTo((Enrichment) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Enrichment other) {
        return configuration.equals(other.configuration)
                && connectionId.equals(other.connectionId)
                && enricherId.equals(other.enricherId)
                && fields.equals(other.fields)
                && mappings.equals(other.mappings);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.configuration, this.connectionId, this.enricherId, this.fields, this.mappings);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Object>> configuration = Optional.empty();

        private Optional<String> connectionId = Optional.empty();

        private Optional<String> enricherId = Optional.empty();

        private Optional<List<ModelField>> fields = Optional.empty();

        private Optional<Map<String, String>> mappings = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Enrichment other) {
            configuration(other.getConfiguration());
            connectionId(other.getConnectionId());
            enricherId(other.getEnricherId());
            fields(other.getFields());
            mappings(other.getMappings());
            return this;
        }

        @JsonSetter(value = "configuration", nulls = Nulls.SKIP)
        public Builder configuration(Optional<Map<String, Object>> configuration) {
            this.configuration = configuration;
            return this;
        }

        public Builder configuration(Map<String, Object> configuration) {
            this.configuration = Optional.of(configuration);
            return this;
        }

        @JsonSetter(value = "connection_id", nulls = Nulls.SKIP)
        public Builder connectionId(Optional<String> connectionId) {
            this.connectionId = connectionId;
            return this;
        }

        public Builder connectionId(String connectionId) {
            this.connectionId = Optional.of(connectionId);
            return this;
        }

        @JsonSetter(value = "enricher_id", nulls = Nulls.SKIP)
        public Builder enricherId(Optional<String> enricherId) {
            this.enricherId = enricherId;
            return this;
        }

        public Builder enricherId(String enricherId) {
            this.enricherId = Optional.of(enricherId);
            return this;
        }

        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public Builder fields(Optional<List<ModelField>> fields) {
            this.fields = fields;
            return this;
        }

        public Builder fields(List<ModelField> fields) {
            this.fields = Optional.of(fields);
            return this;
        }

        @JsonSetter(value = "mappings", nulls = Nulls.SKIP)
        public Builder mappings(Optional<Map<String, String>> mappings) {
            this.mappings = mappings;
            return this;
        }

        public Builder mappings(Map<String, String> mappings) {
            this.mappings = Optional.of(mappings);
            return this;
        }

        public Enrichment build() {
            return new Enrichment(configuration, connectionId, enricherId, fields, mappings, additionalProperties);
        }
    }
}
