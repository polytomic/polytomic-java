/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.polytomic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ModelSampleResponseEnvelope.Builder.class)
public final class ModelSampleResponseEnvelope {
    private final Optional<ModelSample> data;

    private final Optional<JobResponse> job;

    private final Map<String, Object> additionalProperties;

    private ModelSampleResponseEnvelope(
            Optional<ModelSample> data, Optional<JobResponse> job, Map<String, Object> additionalProperties) {
        this.data = data;
        this.job = job;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("data")
    public Optional<ModelSample> getData() {
        return data;
    }

    @JsonProperty("job")
    public Optional<JobResponse> getJob() {
        return job;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ModelSampleResponseEnvelope && equalTo((ModelSampleResponseEnvelope) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ModelSampleResponseEnvelope other) {
        return data.equals(other.data) && job.equals(other.job);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.data, this.job);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ModelSample> data = Optional.empty();

        private Optional<JobResponse> job = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ModelSampleResponseEnvelope other) {
            data(other.getData());
            job(other.getJob());
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Optional<ModelSample> data) {
            this.data = data;
            return this;
        }

        public Builder data(ModelSample data) {
            this.data = Optional.of(data);
            return this;
        }

        @JsonSetter(value = "job", nulls = Nulls.SKIP)
        public Builder job(Optional<JobResponse> job) {
            this.job = job;
            return this;
        }

        public Builder job(JobResponse job) {
            this.job = Optional.of(job);
            return this;
        }

        public ModelSampleResponseEnvelope build() {
            return new ModelSampleResponseEnvelope(data, job, additionalProperties);
        }
    }
}
