/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.polytomic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = V2JobResponse.Builder.class)
public final class V2JobResponse {
    private final Optional<String> error;

    private final Optional<String> jobId;

    private final Optional<Object> result;

    private final Optional<WorkTaskStatus> status;

    private final Optional<String> type;

    private final Map<String, Object> additionalProperties;

    private V2JobResponse(
            Optional<String> error,
            Optional<String> jobId,
            Optional<Object> result,
            Optional<WorkTaskStatus> status,
            Optional<String> type,
            Map<String, Object> additionalProperties) {
        this.error = error;
        this.jobId = jobId;
        this.result = result;
        this.status = status;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("error")
    public Optional<String> getError() {
        return error;
    }

    @JsonProperty("job_id")
    public Optional<String> getJobId() {
        return jobId;
    }

    @JsonProperty("result")
    public Optional<Object> getResult() {
        return result;
    }

    @JsonProperty("status")
    public Optional<WorkTaskStatus> getStatus() {
        return status;
    }

    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof V2JobResponse && equalTo((V2JobResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(V2JobResponse other) {
        return error.equals(other.error)
                && jobId.equals(other.jobId)
                && result.equals(other.result)
                && status.equals(other.status)
                && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.error, this.jobId, this.result, this.status, this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> error = Optional.empty();

        private Optional<String> jobId = Optional.empty();

        private Optional<Object> result = Optional.empty();

        private Optional<WorkTaskStatus> status = Optional.empty();

        private Optional<String> type = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(V2JobResponse other) {
            error(other.getError());
            jobId(other.getJobId());
            result(other.getResult());
            status(other.getStatus());
            type(other.getType());
            return this;
        }

        @JsonSetter(value = "error", nulls = Nulls.SKIP)
        public Builder error(Optional<String> error) {
            this.error = error;
            return this;
        }

        public Builder error(String error) {
            this.error = Optional.of(error);
            return this;
        }

        @JsonSetter(value = "job_id", nulls = Nulls.SKIP)
        public Builder jobId(Optional<String> jobId) {
            this.jobId = jobId;
            return this;
        }

        public Builder jobId(String jobId) {
            this.jobId = Optional.of(jobId);
            return this;
        }

        @JsonSetter(value = "result", nulls = Nulls.SKIP)
        public Builder result(Optional<Object> result) {
            this.result = result;
            return this;
        }

        public Builder result(Object result) {
            this.result = Optional.of(result);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<WorkTaskStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(WorkTaskStatus status) {
            this.status = Optional.of(status);
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.of(type);
            return this;
        }

        public V2JobResponse build() {
            return new V2JobResponse(error, jobId, result, status, type, additionalProperties);
        }
    }
}
