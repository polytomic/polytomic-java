/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.polytomic.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ModelResponse.Builder.class)
public final class ModelResponse {
    private final Optional<Map<String, Object>> configuration;

    private final Optional<String> connectionId;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<CommonOutputActor> createdBy;

    private final Optional<Enrichment> enricher;

    private final Optional<List<ModelField>> fields;

    private final Optional<String> id;

    private final Optional<String> identifier;

    private final Optional<List<Map<String, Object>>> labels;

    private final Optional<String> name;

    private final Optional<String> organizationId;

    private final Optional<List<String>> policies;

    private final Optional<List<Relation>> relations;

    private final Optional<List<String>> trackingColumns;

    private final Optional<String> type;

    private final Optional<OffsetDateTime> updatedAt;

    private final Optional<CommonOutputActor> updatedBy;

    private final Optional<Integer> version;

    private final Map<String, Object> additionalProperties;

    private ModelResponse(
            Optional<Map<String, Object>> configuration,
            Optional<String> connectionId,
            Optional<OffsetDateTime> createdAt,
            Optional<CommonOutputActor> createdBy,
            Optional<Enrichment> enricher,
            Optional<List<ModelField>> fields,
            Optional<String> id,
            Optional<String> identifier,
            Optional<List<Map<String, Object>>> labels,
            Optional<String> name,
            Optional<String> organizationId,
            Optional<List<String>> policies,
            Optional<List<Relation>> relations,
            Optional<List<String>> trackingColumns,
            Optional<String> type,
            Optional<OffsetDateTime> updatedAt,
            Optional<CommonOutputActor> updatedBy,
            Optional<Integer> version,
            Map<String, Object> additionalProperties) {
        this.configuration = configuration;
        this.connectionId = connectionId;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.enricher = enricher;
        this.fields = fields;
        this.id = id;
        this.identifier = identifier;
        this.labels = labels;
        this.name = name;
        this.organizationId = organizationId;
        this.policies = policies;
        this.relations = relations;
        this.trackingColumns = trackingColumns;
        this.type = type;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
        this.version = version;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("configuration")
    public Optional<Map<String, Object>> getConfiguration() {
        return configuration;
    }

    @JsonProperty("connection_id")
    public Optional<String> getConnectionId() {
        return connectionId;
    }

    @JsonProperty("created_at")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("created_by")
    public Optional<CommonOutputActor> getCreatedBy() {
        return createdBy;
    }

    @JsonProperty("enricher")
    public Optional<Enrichment> getEnricher() {
        return enricher;
    }

    @JsonProperty("fields")
    public Optional<List<ModelField>> getFields() {
        return fields;
    }

    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    @JsonProperty("identifier")
    public Optional<String> getIdentifier() {
        return identifier;
    }

    @JsonProperty("labels")
    public Optional<List<Map<String, Object>>> getLabels() {
        return labels;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("organization_id")
    public Optional<String> getOrganizationId() {
        return organizationId;
    }

    @JsonProperty("policies")
    public Optional<List<String>> getPolicies() {
        return policies;
    }

    @JsonProperty("relations")
    public Optional<List<Relation>> getRelations() {
        return relations;
    }

    @JsonProperty("tracking_columns")
    public Optional<List<String>> getTrackingColumns() {
        return trackingColumns;
    }

    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @JsonProperty("updated_at")
    public Optional<OffsetDateTime> getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("updated_by")
    public Optional<CommonOutputActor> getUpdatedBy() {
        return updatedBy;
    }

    @JsonProperty("version")
    public Optional<Integer> getVersion() {
        return version;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ModelResponse && equalTo((ModelResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ModelResponse other) {
        return configuration.equals(other.configuration)
                && connectionId.equals(other.connectionId)
                && createdAt.equals(other.createdAt)
                && createdBy.equals(other.createdBy)
                && enricher.equals(other.enricher)
                && fields.equals(other.fields)
                && id.equals(other.id)
                && identifier.equals(other.identifier)
                && labels.equals(other.labels)
                && name.equals(other.name)
                && organizationId.equals(other.organizationId)
                && policies.equals(other.policies)
                && relations.equals(other.relations)
                && trackingColumns.equals(other.trackingColumns)
                && type.equals(other.type)
                && updatedAt.equals(other.updatedAt)
                && updatedBy.equals(other.updatedBy)
                && version.equals(other.version);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.configuration,
                this.connectionId,
                this.createdAt,
                this.createdBy,
                this.enricher,
                this.fields,
                this.id,
                this.identifier,
                this.labels,
                this.name,
                this.organizationId,
                this.policies,
                this.relations,
                this.trackingColumns,
                this.type,
                this.updatedAt,
                this.updatedBy,
                this.version);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Object>> configuration = Optional.empty();

        private Optional<String> connectionId = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<CommonOutputActor> createdBy = Optional.empty();

        private Optional<Enrichment> enricher = Optional.empty();

        private Optional<List<ModelField>> fields = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<String> identifier = Optional.empty();

        private Optional<List<Map<String, Object>>> labels = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> organizationId = Optional.empty();

        private Optional<List<String>> policies = Optional.empty();

        private Optional<List<Relation>> relations = Optional.empty();

        private Optional<List<String>> trackingColumns = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<CommonOutputActor> updatedBy = Optional.empty();

        private Optional<Integer> version = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ModelResponse other) {
            configuration(other.getConfiguration());
            connectionId(other.getConnectionId());
            createdAt(other.getCreatedAt());
            createdBy(other.getCreatedBy());
            enricher(other.getEnricher());
            fields(other.getFields());
            id(other.getId());
            identifier(other.getIdentifier());
            labels(other.getLabels());
            name(other.getName());
            organizationId(other.getOrganizationId());
            policies(other.getPolicies());
            relations(other.getRelations());
            trackingColumns(other.getTrackingColumns());
            type(other.getType());
            updatedAt(other.getUpdatedAt());
            updatedBy(other.getUpdatedBy());
            version(other.getVersion());
            return this;
        }

        @JsonSetter(value = "configuration", nulls = Nulls.SKIP)
        public Builder configuration(Optional<Map<String, Object>> configuration) {
            this.configuration = configuration;
            return this;
        }

        public Builder configuration(Map<String, Object> configuration) {
            this.configuration = Optional.of(configuration);
            return this;
        }

        @JsonSetter(value = "connection_id", nulls = Nulls.SKIP)
        public Builder connectionId(Optional<String> connectionId) {
            this.connectionId = connectionId;
            return this;
        }

        public Builder connectionId(String connectionId) {
            this.connectionId = Optional.of(connectionId);
            return this;
        }

        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.of(createdAt);
            return this;
        }

        @JsonSetter(value = "created_by", nulls = Nulls.SKIP)
        public Builder createdBy(Optional<CommonOutputActor> createdBy) {
            this.createdBy = createdBy;
            return this;
        }

        public Builder createdBy(CommonOutputActor createdBy) {
            this.createdBy = Optional.of(createdBy);
            return this;
        }

        @JsonSetter(value = "enricher", nulls = Nulls.SKIP)
        public Builder enricher(Optional<Enrichment> enricher) {
            this.enricher = enricher;
            return this;
        }

        public Builder enricher(Enrichment enricher) {
            this.enricher = Optional.of(enricher);
            return this;
        }

        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public Builder fields(Optional<List<ModelField>> fields) {
            this.fields = fields;
            return this;
        }

        public Builder fields(List<ModelField> fields) {
            this.fields = Optional.of(fields);
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.of(id);
            return this;
        }

        @JsonSetter(value = "identifier", nulls = Nulls.SKIP)
        public Builder identifier(Optional<String> identifier) {
            this.identifier = identifier;
            return this;
        }

        public Builder identifier(String identifier) {
            this.identifier = Optional.of(identifier);
            return this;
        }

        @JsonSetter(value = "labels", nulls = Nulls.SKIP)
        public Builder labels(Optional<List<Map<String, Object>>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(List<Map<String, Object>> labels) {
            this.labels = Optional.of(labels);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.of(name);
            return this;
        }

        @JsonSetter(value = "organization_id", nulls = Nulls.SKIP)
        public Builder organizationId(Optional<String> organizationId) {
            this.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            this.organizationId = Optional.of(organizationId);
            return this;
        }

        @JsonSetter(value = "policies", nulls = Nulls.SKIP)
        public Builder policies(Optional<List<String>> policies) {
            this.policies = policies;
            return this;
        }

        public Builder policies(List<String> policies) {
            this.policies = Optional.of(policies);
            return this;
        }

        @JsonSetter(value = "relations", nulls = Nulls.SKIP)
        public Builder relations(Optional<List<Relation>> relations) {
            this.relations = relations;
            return this;
        }

        public Builder relations(List<Relation> relations) {
            this.relations = Optional.of(relations);
            return this;
        }

        @JsonSetter(value = "tracking_columns", nulls = Nulls.SKIP)
        public Builder trackingColumns(Optional<List<String>> trackingColumns) {
            this.trackingColumns = trackingColumns;
            return this;
        }

        public Builder trackingColumns(List<String> trackingColumns) {
            this.trackingColumns = Optional.of(trackingColumns);
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.of(type);
            return this;
        }

        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = Optional.of(updatedAt);
            return this;
        }

        @JsonSetter(value = "updated_by", nulls = Nulls.SKIP)
        public Builder updatedBy(Optional<CommonOutputActor> updatedBy) {
            this.updatedBy = updatedBy;
            return this;
        }

        public Builder updatedBy(CommonOutputActor updatedBy) {
            this.updatedBy = Optional.of(updatedBy);
            return this;
        }

        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<Integer> version) {
            this.version = version;
            return this;
        }

        public Builder version(Integer version) {
            this.version = Optional.of(version);
            return this;
        }

        public ModelResponse build() {
            return new ModelResponse(
                    configuration,
                    connectionId,
                    createdAt,
                    createdBy,
                    enricher,
                    fields,
                    id,
                    identifier,
                    labels,
                    name,
                    organizationId,
                    policies,
                    relations,
                    trackingColumns,
                    type,
                    updatedAt,
                    updatedBy,
                    version,
                    additionalProperties);
        }
    }
}
