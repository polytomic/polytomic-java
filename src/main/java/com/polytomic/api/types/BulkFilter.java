/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.polytomic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BulkFilter.Builder.class)
public final class BulkFilter {
    private final Optional<String> fieldId;

    private final FilterFunction function;

    private final Optional<Object> value;

    private final Map<String, Object> additionalProperties;

    private BulkFilter(
            Optional<String> fieldId,
            FilterFunction function,
            Optional<Object> value,
            Map<String, Object> additionalProperties) {
        this.fieldId = fieldId;
        this.function = function;
        this.value = value;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Schema field ID to filter on.
     */
    @JsonProperty("field_id")
    public Optional<String> getFieldId() {
        return fieldId;
    }

    @JsonProperty("function")
    public FilterFunction getFunction() {
        return function;
    }

    @JsonProperty("value")
    public Optional<Object> getValue() {
        return value;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BulkFilter && equalTo((BulkFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BulkFilter other) {
        return fieldId.equals(other.fieldId) && function.equals(other.function) && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.fieldId, this.function, this.value);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FunctionStage builder() {
        return new Builder();
    }

    public interface FunctionStage {
        _FinalStage function(FilterFunction function);

        Builder from(BulkFilter other);
    }

    public interface _FinalStage {
        BulkFilter build();

        _FinalStage fieldId(Optional<String> fieldId);

        _FinalStage fieldId(String fieldId);

        _FinalStage value(Optional<Object> value);

        _FinalStage value(Object value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FunctionStage, _FinalStage {
        private FilterFunction function;

        private Optional<Object> value = Optional.empty();

        private Optional<String> fieldId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BulkFilter other) {
            fieldId(other.getFieldId());
            function(other.getFunction());
            value(other.getValue());
            return this;
        }

        @java.lang.Override
        @JsonSetter("function")
        public _FinalStage function(FilterFunction function) {
            this.function = function;
            return this;
        }

        @java.lang.Override
        public _FinalStage value(Object value) {
            this.value = Optional.of(value);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public _FinalStage value(Optional<Object> value) {
            this.value = value;
            return this;
        }

        /**
         * <p>Schema field ID to filter on.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fieldId(String fieldId) {
            this.fieldId = Optional.of(fieldId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "field_id", nulls = Nulls.SKIP)
        public _FinalStage fieldId(Optional<String> fieldId) {
            this.fieldId = fieldId;
            return this;
        }

        @java.lang.Override
        public BulkFilter build() {
            return new BulkFilter(fieldId, function, value, additionalProperties);
        }
    }
}
