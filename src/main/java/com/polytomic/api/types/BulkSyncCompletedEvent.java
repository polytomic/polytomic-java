/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.polytomic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BulkSyncCompletedEvent.Builder.class)
public final class BulkSyncCompletedEvent {
    private final Optional<String> destinationConnectionId;

    private final Optional<String> executionId;

    private final Optional<String> name;

    private final Optional<String> organizationId;

    private final Optional<String> sourceConnectionId;

    private final Optional<String> syncId;

    private final Optional<String> triggerSource;

    private final Map<String, Object> additionalProperties;

    private BulkSyncCompletedEvent(
            Optional<String> destinationConnectionId,
            Optional<String> executionId,
            Optional<String> name,
            Optional<String> organizationId,
            Optional<String> sourceConnectionId,
            Optional<String> syncId,
            Optional<String> triggerSource,
            Map<String, Object> additionalProperties) {
        this.destinationConnectionId = destinationConnectionId;
        this.executionId = executionId;
        this.name = name;
        this.organizationId = organizationId;
        this.sourceConnectionId = sourceConnectionId;
        this.syncId = syncId;
        this.triggerSource = triggerSource;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("destination_connection_id")
    public Optional<String> getDestinationConnectionId() {
        return destinationConnectionId;
    }

    @JsonProperty("execution_id")
    public Optional<String> getExecutionId() {
        return executionId;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("organization_id")
    public Optional<String> getOrganizationId() {
        return organizationId;
    }

    @JsonProperty("source_connection_id")
    public Optional<String> getSourceConnectionId() {
        return sourceConnectionId;
    }

    @JsonProperty("sync_id")
    public Optional<String> getSyncId() {
        return syncId;
    }

    @JsonProperty("trigger_source")
    public Optional<String> getTriggerSource() {
        return triggerSource;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BulkSyncCompletedEvent && equalTo((BulkSyncCompletedEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BulkSyncCompletedEvent other) {
        return destinationConnectionId.equals(other.destinationConnectionId)
                && executionId.equals(other.executionId)
                && name.equals(other.name)
                && organizationId.equals(other.organizationId)
                && sourceConnectionId.equals(other.sourceConnectionId)
                && syncId.equals(other.syncId)
                && triggerSource.equals(other.triggerSource);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.destinationConnectionId,
                this.executionId,
                this.name,
                this.organizationId,
                this.sourceConnectionId,
                this.syncId,
                this.triggerSource);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> destinationConnectionId = Optional.empty();

        private Optional<String> executionId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> organizationId = Optional.empty();

        private Optional<String> sourceConnectionId = Optional.empty();

        private Optional<String> syncId = Optional.empty();

        private Optional<String> triggerSource = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BulkSyncCompletedEvent other) {
            destinationConnectionId(other.getDestinationConnectionId());
            executionId(other.getExecutionId());
            name(other.getName());
            organizationId(other.getOrganizationId());
            sourceConnectionId(other.getSourceConnectionId());
            syncId(other.getSyncId());
            triggerSource(other.getTriggerSource());
            return this;
        }

        @JsonSetter(value = "destination_connection_id", nulls = Nulls.SKIP)
        public Builder destinationConnectionId(Optional<String> destinationConnectionId) {
            this.destinationConnectionId = destinationConnectionId;
            return this;
        }

        public Builder destinationConnectionId(String destinationConnectionId) {
            this.destinationConnectionId = Optional.of(destinationConnectionId);
            return this;
        }

        @JsonSetter(value = "execution_id", nulls = Nulls.SKIP)
        public Builder executionId(Optional<String> executionId) {
            this.executionId = executionId;
            return this;
        }

        public Builder executionId(String executionId) {
            this.executionId = Optional.of(executionId);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.of(name);
            return this;
        }

        @JsonSetter(value = "organization_id", nulls = Nulls.SKIP)
        public Builder organizationId(Optional<String> organizationId) {
            this.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            this.organizationId = Optional.of(organizationId);
            return this;
        }

        @JsonSetter(value = "source_connection_id", nulls = Nulls.SKIP)
        public Builder sourceConnectionId(Optional<String> sourceConnectionId) {
            this.sourceConnectionId = sourceConnectionId;
            return this;
        }

        public Builder sourceConnectionId(String sourceConnectionId) {
            this.sourceConnectionId = Optional.of(sourceConnectionId);
            return this;
        }

        @JsonSetter(value = "sync_id", nulls = Nulls.SKIP)
        public Builder syncId(Optional<String> syncId) {
            this.syncId = syncId;
            return this;
        }

        public Builder syncId(String syncId) {
            this.syncId = Optional.of(syncId);
            return this;
        }

        @JsonSetter(value = "trigger_source", nulls = Nulls.SKIP)
        public Builder triggerSource(Optional<String> triggerSource) {
            this.triggerSource = triggerSource;
            return this;
        }

        public Builder triggerSource(String triggerSource) {
            this.triggerSource = Optional.of(triggerSource);
            return this;
        }

        public BulkSyncCompletedEvent build() {
            return new BulkSyncCompletedEvent(
                    destinationConnectionId,
                    executionId,
                    name,
                    organizationId,
                    sourceConnectionId,
                    syncId,
                    triggerSource,
                    additionalProperties);
        }
    }
}
