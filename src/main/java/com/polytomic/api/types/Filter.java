/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.polytomic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Filter.Builder.class)
public final class Filter {
    private final Optional<Source> field;

    private final Optional<String> fieldId;

    private final Optional<FilterFieldReferenceType> fieldType;

    private final FilterFunction function;

    private final Optional<String> label;

    private final Optional<Object> value;

    private final Map<String, Object> additionalProperties;

    private Filter(
            Optional<Source> field,
            Optional<String> fieldId,
            Optional<FilterFieldReferenceType> fieldType,
            FilterFunction function,
            Optional<String> label,
            Optional<Object> value,
            Map<String, Object> additionalProperties) {
        this.field = field;
        this.fieldId = fieldId;
        this.fieldType = fieldType;
        this.function = function;
        this.label = label;
        this.value = value;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("field")
    public Optional<Source> getField() {
        return field;
    }

    /**
     * @return Model or Target field name to filter on.
     */
    @JsonProperty("field_id")
    public Optional<String> getFieldId() {
        return fieldId;
    }

    @JsonProperty("field_type")
    public Optional<FilterFieldReferenceType> getFieldType() {
        return fieldType;
    }

    @JsonProperty("function")
    public FilterFunction getFunction() {
        return function;
    }

    @JsonProperty("label")
    public Optional<String> getLabel() {
        return label;
    }

    @JsonProperty("value")
    public Optional<Object> getValue() {
        return value;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Filter && equalTo((Filter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Filter other) {
        return field.equals(other.field)
                && fieldId.equals(other.fieldId)
                && fieldType.equals(other.fieldType)
                && function.equals(other.function)
                && label.equals(other.label)
                && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.field, this.fieldId, this.fieldType, this.function, this.label, this.value);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FunctionStage builder() {
        return new Builder();
    }

    public interface FunctionStage {
        _FinalStage function(FilterFunction function);

        Builder from(Filter other);
    }

    public interface _FinalStage {
        Filter build();

        _FinalStage field(Optional<Source> field);

        _FinalStage field(Source field);

        _FinalStage fieldId(Optional<String> fieldId);

        _FinalStage fieldId(String fieldId);

        _FinalStage fieldType(Optional<FilterFieldReferenceType> fieldType);

        _FinalStage fieldType(FilterFieldReferenceType fieldType);

        _FinalStage label(Optional<String> label);

        _FinalStage label(String label);

        _FinalStage value(Optional<Object> value);

        _FinalStage value(Object value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FunctionStage, _FinalStage {
        private FilterFunction function;

        private Optional<Object> value = Optional.empty();

        private Optional<String> label = Optional.empty();

        private Optional<FilterFieldReferenceType> fieldType = Optional.empty();

        private Optional<String> fieldId = Optional.empty();

        private Optional<Source> field = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Filter other) {
            field(other.getField());
            fieldId(other.getFieldId());
            fieldType(other.getFieldType());
            function(other.getFunction());
            label(other.getLabel());
            value(other.getValue());
            return this;
        }

        @java.lang.Override
        @JsonSetter("function")
        public _FinalStage function(FilterFunction function) {
            this.function = function;
            return this;
        }

        @java.lang.Override
        public _FinalStage value(Object value) {
            this.value = Optional.of(value);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public _FinalStage value(Optional<Object> value) {
            this.value = value;
            return this;
        }

        @java.lang.Override
        public _FinalStage label(String label) {
            this.label = Optional.of(label);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "label", nulls = Nulls.SKIP)
        public _FinalStage label(Optional<String> label) {
            this.label = label;
            return this;
        }

        @java.lang.Override
        public _FinalStage fieldType(FilterFieldReferenceType fieldType) {
            this.fieldType = Optional.of(fieldType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "field_type", nulls = Nulls.SKIP)
        public _FinalStage fieldType(Optional<FilterFieldReferenceType> fieldType) {
            this.fieldType = fieldType;
            return this;
        }

        /**
         * <p>Model or Target field name to filter on.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fieldId(String fieldId) {
            this.fieldId = Optional.of(fieldId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "field_id", nulls = Nulls.SKIP)
        public _FinalStage fieldId(Optional<String> fieldId) {
            this.fieldId = fieldId;
            return this;
        }

        @java.lang.Override
        public _FinalStage field(Source field) {
            this.field = Optional.of(field);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "field", nulls = Nulls.SKIP)
        public _FinalStage field(Optional<Source> field) {
            this.field = field;
            return this;
        }

        @java.lang.Override
        public Filter build() {
            return new Filter(field, fieldId, fieldType, function, label, value, additionalProperties);
        }
    }
}
