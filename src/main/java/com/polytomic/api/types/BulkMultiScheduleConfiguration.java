/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.polytomic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BulkMultiScheduleConfiguration.Builder.class)
public final class BulkMultiScheduleConfiguration {
    private final Optional<List<BulkItemizedSchedule>> schedules;

    private final String type;

    private final Map<String, Object> additionalProperties;

    private BulkMultiScheduleConfiguration(
            Optional<List<BulkItemizedSchedule>> schedules, String type, Map<String, Object> additionalProperties) {
        this.schedules = schedules;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("schedules")
    public Optional<List<BulkItemizedSchedule>> getSchedules() {
        return schedules;
    }

    @JsonProperty("type")
    public String getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BulkMultiScheduleConfiguration && equalTo((BulkMultiScheduleConfiguration) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BulkMultiScheduleConfiguration other) {
        return schedules.equals(other.schedules) && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.schedules, this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        _FinalStage type(String type);

        Builder from(BulkMultiScheduleConfiguration other);
    }

    public interface _FinalStage {
        BulkMultiScheduleConfiguration build();

        _FinalStage schedules(Optional<List<BulkItemizedSchedule>> schedules);

        _FinalStage schedules(List<BulkItemizedSchedule> schedules);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, _FinalStage {
        private String type;

        private Optional<List<BulkItemizedSchedule>> schedules = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BulkMultiScheduleConfiguration other) {
            schedules(other.getSchedules());
            type(other.getType());
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public _FinalStage type(String type) {
            this.type = type;
            return this;
        }

        @java.lang.Override
        public _FinalStage schedules(List<BulkItemizedSchedule> schedules) {
            this.schedules = Optional.of(schedules);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "schedules", nulls = Nulls.SKIP)
        public _FinalStage schedules(Optional<List<BulkItemizedSchedule>> schedules) {
            this.schedules = schedules;
            return this;
        }

        @java.lang.Override
        public BulkMultiScheduleConfiguration build() {
            return new BulkMultiScheduleConfiguration(schedules, type, additionalProperties);
        }
    }
}
