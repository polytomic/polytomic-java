/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.polytomic.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BulkSyncExecutionStatus.Builder.class)
public final class BulkSyncExecutionStatus {
    private final Optional<OffsetDateTime> nextExecutionTime;

    private final Optional<List<BulkSyncSchemaExecutionStatus>> schemas;

    private final Optional<BulkExecutionStatus> status;

    private final Optional<String> syncId;

    private final Map<String, Object> additionalProperties;

    private BulkSyncExecutionStatus(
            Optional<OffsetDateTime> nextExecutionTime,
            Optional<List<BulkSyncSchemaExecutionStatus>> schemas,
            Optional<BulkExecutionStatus> status,
            Optional<String> syncId,
            Map<String, Object> additionalProperties) {
        this.nextExecutionTime = nextExecutionTime;
        this.schemas = schemas;
        this.status = status;
        this.syncId = syncId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("nextExecutionTime")
    public Optional<OffsetDateTime> getNextExecutionTime() {
        return nextExecutionTime;
    }

    @JsonProperty("schemas")
    public Optional<List<BulkSyncSchemaExecutionStatus>> getSchemas() {
        return schemas;
    }

    @JsonProperty("status")
    public Optional<BulkExecutionStatus> getStatus() {
        return status;
    }

    @JsonProperty("sync_id")
    public Optional<String> getSyncId() {
        return syncId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BulkSyncExecutionStatus && equalTo((BulkSyncExecutionStatus) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BulkSyncExecutionStatus other) {
        return nextExecutionTime.equals(other.nextExecutionTime)
                && schemas.equals(other.schemas)
                && status.equals(other.status)
                && syncId.equals(other.syncId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.nextExecutionTime, this.schemas, this.status, this.syncId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<OffsetDateTime> nextExecutionTime = Optional.empty();

        private Optional<List<BulkSyncSchemaExecutionStatus>> schemas = Optional.empty();

        private Optional<BulkExecutionStatus> status = Optional.empty();

        private Optional<String> syncId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BulkSyncExecutionStatus other) {
            nextExecutionTime(other.getNextExecutionTime());
            schemas(other.getSchemas());
            status(other.getStatus());
            syncId(other.getSyncId());
            return this;
        }

        @JsonSetter(value = "nextExecutionTime", nulls = Nulls.SKIP)
        public Builder nextExecutionTime(Optional<OffsetDateTime> nextExecutionTime) {
            this.nextExecutionTime = nextExecutionTime;
            return this;
        }

        public Builder nextExecutionTime(OffsetDateTime nextExecutionTime) {
            this.nextExecutionTime = Optional.of(nextExecutionTime);
            return this;
        }

        @JsonSetter(value = "schemas", nulls = Nulls.SKIP)
        public Builder schemas(Optional<List<BulkSyncSchemaExecutionStatus>> schemas) {
            this.schemas = schemas;
            return this;
        }

        public Builder schemas(List<BulkSyncSchemaExecutionStatus> schemas) {
            this.schemas = Optional.of(schemas);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<BulkExecutionStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(BulkExecutionStatus status) {
            this.status = Optional.of(status);
            return this;
        }

        @JsonSetter(value = "sync_id", nulls = Nulls.SKIP)
        public Builder syncId(Optional<String> syncId) {
            this.syncId = syncId;
            return this;
        }

        public Builder syncId(String syncId) {
            this.syncId = Optional.of(syncId);
            return this;
        }

        public BulkSyncExecutionStatus build() {
            return new BulkSyncExecutionStatus(nextExecutionTime, schemas, status, syncId, additionalProperties);
        }
    }
}
