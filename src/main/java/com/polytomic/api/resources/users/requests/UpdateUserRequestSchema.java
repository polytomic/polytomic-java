/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.resources.users.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.polytomic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UpdateUserRequestSchema.Builder.class)
public final class UpdateUserRequestSchema {
    private final String email;

    private final Optional<String> role;

    private final Map<String, Object> additionalProperties;

    private UpdateUserRequestSchema(String email, Optional<String> role, Map<String, Object> additionalProperties) {
        this.email = email;
        this.role = role;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("email")
    public String getEmail() {
        return email;
    }

    @JsonProperty("role")
    public Optional<String> getRole() {
        return role;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateUserRequestSchema && equalTo((UpdateUserRequestSchema) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateUserRequestSchema other) {
        return email.equals(other.email) && role.equals(other.role);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.email, this.role);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EmailStage builder() {
        return new Builder();
    }

    public interface EmailStage {
        _FinalStage email(String email);

        Builder from(UpdateUserRequestSchema other);
    }

    public interface _FinalStage {
        UpdateUserRequestSchema build();

        _FinalStage role(Optional<String> role);

        _FinalStage role(String role);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EmailStage, _FinalStage {
        private String email;

        private Optional<String> role = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdateUserRequestSchema other) {
            email(other.getEmail());
            role(other.getRole());
            return this;
        }

        @java.lang.Override
        @JsonSetter("email")
        public _FinalStage email(String email) {
            this.email = email;
            return this;
        }

        @java.lang.Override
        public _FinalStage role(String role) {
            this.role = Optional.of(role);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "role", nulls = Nulls.SKIP)
        public _FinalStage role(Optional<String> role) {
            this.role = role;
            return this;
        }

        @java.lang.Override
        public UpdateUserRequestSchema build() {
            return new UpdateUserRequestSchema(email, role, additionalProperties);
        }
    }
}
