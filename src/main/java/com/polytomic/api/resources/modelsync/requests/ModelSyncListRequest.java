/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.resources.modelsync.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.polytomic.api.core.ObjectMappers;
import com.polytomic.api.types.SyncMode;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ModelSyncListRequest.Builder.class)
public final class ModelSyncListRequest {
    private final Optional<Boolean> active;

    private final Optional<SyncMode> mode;

    private final Optional<String> targetConnectionId;

    private final Map<String, Object> additionalProperties;

    private ModelSyncListRequest(
            Optional<Boolean> active,
            Optional<SyncMode> mode,
            Optional<String> targetConnectionId,
            Map<String, Object> additionalProperties) {
        this.active = active;
        this.mode = mode;
        this.targetConnectionId = targetConnectionId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("active")
    public Optional<Boolean> getActive() {
        return active;
    }

    @JsonProperty("mode")
    public Optional<SyncMode> getMode() {
        return mode;
    }

    @JsonProperty("target_connection_id")
    public Optional<String> getTargetConnectionId() {
        return targetConnectionId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ModelSyncListRequest && equalTo((ModelSyncListRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ModelSyncListRequest other) {
        return active.equals(other.active)
                && mode.equals(other.mode)
                && targetConnectionId.equals(other.targetConnectionId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.active, this.mode, this.targetConnectionId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> active = Optional.empty();

        private Optional<SyncMode> mode = Optional.empty();

        private Optional<String> targetConnectionId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ModelSyncListRequest other) {
            active(other.getActive());
            mode(other.getMode());
            targetConnectionId(other.getTargetConnectionId());
            return this;
        }

        @JsonSetter(value = "active", nulls = Nulls.SKIP)
        public Builder active(Optional<Boolean> active) {
            this.active = active;
            return this;
        }

        public Builder active(Boolean active) {
            this.active = Optional.of(active);
            return this;
        }

        @JsonSetter(value = "mode", nulls = Nulls.SKIP)
        public Builder mode(Optional<SyncMode> mode) {
            this.mode = mode;
            return this;
        }

        public Builder mode(SyncMode mode) {
            this.mode = Optional.of(mode);
            return this;
        }

        @JsonSetter(value = "target_connection_id", nulls = Nulls.SKIP)
        public Builder targetConnectionId(Optional<String> targetConnectionId) {
            this.targetConnectionId = targetConnectionId;
            return this;
        }

        public Builder targetConnectionId(String targetConnectionId) {
            this.targetConnectionId = Optional.of(targetConnectionId);
            return this;
        }

        public ModelSyncListRequest build() {
            return new ModelSyncListRequest(active, mode, targetConnectionId, additionalProperties);
        }
    }
}
