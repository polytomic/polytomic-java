/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.resources.queryrunner.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.polytomic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = V4RunQueryRequest.Builder.class)
public final class V4RunQueryRequest {
    private final Optional<String> query;

    private final Optional<String> v4RunQueryRequestQuery;

    private final Map<String, Object> additionalProperties;

    private V4RunQueryRequest(
            Optional<String> query, Optional<String> v4RunQueryRequestQuery, Map<String, Object> additionalProperties) {
        this.query = query;
        this.v4RunQueryRequestQuery = v4RunQueryRequestQuery;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The query to execute against the connection.
     */
    @JsonProperty("query")
    public Optional<String> getQuery() {
        return query;
    }

    /**
     * @return The query to execute against the connection.
     */
    @JsonProperty("query")
    public Optional<String> getV4RunQueryRequestQuery() {
        return v4RunQueryRequestQuery;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof V4RunQueryRequest && equalTo((V4RunQueryRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(V4RunQueryRequest other) {
        return query.equals(other.query) && v4RunQueryRequestQuery.equals(other.v4RunQueryRequestQuery);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.query, this.v4RunQueryRequestQuery);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> query = Optional.empty();

        private Optional<String> v4RunQueryRequestQuery = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(V4RunQueryRequest other) {
            query(other.getQuery());
            v4RunQueryRequestQuery(other.getV4RunQueryRequestQuery());
            return this;
        }

        @JsonSetter(value = "query", nulls = Nulls.SKIP)
        public Builder query(Optional<String> query) {
            this.query = query;
            return this;
        }

        public Builder query(String query) {
            this.query = Optional.of(query);
            return this;
        }

        @JsonSetter(value = "query", nulls = Nulls.SKIP)
        public Builder v4RunQueryRequestQuery(Optional<String> v4RunQueryRequestQuery) {
            this.v4RunQueryRequestQuery = v4RunQueryRequestQuery;
            return this;
        }

        public Builder v4RunQueryRequestQuery(String v4RunQueryRequestQuery) {
            this.v4RunQueryRequestQuery = Optional.of(v4RunQueryRequestQuery);
            return this;
        }

        public V4RunQueryRequest build() {
            return new V4RunQueryRequest(query, v4RunQueryRequestQuery, additionalProperties);
        }
    }
}
