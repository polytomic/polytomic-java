/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.resources.queryrunner;

import com.polytomic.api.core.ApiError;
import com.polytomic.api.core.ClientOptions;
import com.polytomic.api.core.MediaTypes;
import com.polytomic.api.core.ObjectMappers;
import com.polytomic.api.core.RequestOptions;
import com.polytomic.api.resources.queryrunner.requests.QueryRunnerGetQueryRequest;
import com.polytomic.api.resources.queryrunner.requests.V4RunQueryRequest;
import com.polytomic.api.types.V4QueryResultsEnvelope;
import com.polytomic.api.types.V4RunQueryEnvelope;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class QueryRunnerClient {
    protected final ClientOptions clientOptions;

    public QueryRunnerClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public V4RunQueryEnvelope runQuery(String connectionId) {
        return runQuery(connectionId, V4RunQueryRequest.builder().build());
    }

    public V4RunQueryEnvelope runQuery(String connectionId, V4RunQueryRequest request) {
        return runQuery(connectionId, request, null);
    }

    public V4RunQueryEnvelope runQuery(String connectionId, V4RunQueryRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/connections")
                .addPathSegment(connectionId)
                .addPathSegments("query");
        if (request.getQuery().isPresent()) {
            httpUrl.addQueryParameter("query", request.getQuery().get());
        }
        Map<String, Object> properties = new HashMap<>();
        if (request.getV4RunQueryRequestQuery().isPresent()) {
            properties.put("query", request.getV4RunQueryRequestQuery());
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V4RunQueryEnvelope.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public V4QueryResultsEnvelope getQuery(String id) {
        return getQuery(id, QueryRunnerGetQueryRequest.builder().build());
    }

    public V4QueryResultsEnvelope getQuery(String id, QueryRunnerGetQueryRequest request) {
        return getQuery(id, request, null);
    }

    public V4QueryResultsEnvelope getQuery(
            String id, QueryRunnerGetQueryRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/queries")
                .addPathSegment(id);
        if (request.getPage().isPresent()) {
            httpUrl.addQueryParameter("page", request.getPage().get());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), V4QueryResultsEnvelope.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
