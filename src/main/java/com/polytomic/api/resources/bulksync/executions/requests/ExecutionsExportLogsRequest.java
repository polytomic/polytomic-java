/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.resources.bulksync.executions.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.polytomic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ExecutionsExportLogsRequest.Builder.class)
public final class ExecutionsExportLogsRequest {
    private final Optional<Boolean> notify;

    private final Map<String, Object> additionalProperties;

    private ExecutionsExportLogsRequest(Optional<Boolean> notify, Map<String, Object> additionalProperties) {
        this.notify = notify;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Send a notification to the user when the logs are ready for download.
     */
    @JsonProperty("notify")
    public Optional<Boolean> getNotify() {
        return notify;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExecutionsExportLogsRequest && equalTo((ExecutionsExportLogsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExecutionsExportLogsRequest other) {
        return notify.equals(other.notify);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.notify);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> notify = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ExecutionsExportLogsRequest other) {
            notify(other.getNotify());
            return this;
        }

        @JsonSetter(value = "notify", nulls = Nulls.SKIP)
        public Builder notify(Optional<Boolean> notify) {
            this.notify = notify;
            return this;
        }

        public Builder notify(Boolean notify) {
            this.notify = Optional.of(notify);
            return this;
        }

        public ExecutionsExportLogsRequest build() {
            return new ExecutionsExportLogsRequest(notify, additionalProperties);
        }
    }
}
