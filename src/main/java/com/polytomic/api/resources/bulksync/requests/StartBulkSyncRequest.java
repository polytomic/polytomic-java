/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.resources.bulksync.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.polytomic.api.core.ObjectMappers;
import com.polytomic.api.types.BulkFetchMode;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = StartBulkSyncRequest.Builder.class)
public final class StartBulkSyncRequest {
    private final Optional<BulkFetchMode> fetchMode;

    private final Optional<Boolean> resync;

    private final Optional<List<String>> schemas;

    private final Optional<Boolean> test;

    private final Map<String, Object> additionalProperties;

    private StartBulkSyncRequest(
            Optional<BulkFetchMode> fetchMode,
            Optional<Boolean> resync,
            Optional<List<String>> schemas,
            Optional<Boolean> test,
            Map<String, Object> additionalProperties) {
        this.fetchMode = fetchMode;
        this.resync = resync;
        this.schemas = schemas;
        this.test = test;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("fetch_mode")
    public Optional<BulkFetchMode> getFetchMode() {
        return fetchMode;
    }

    @JsonProperty("resync")
    public Optional<Boolean> getResync() {
        return resync;
    }

    @JsonProperty("schemas")
    public Optional<List<String>> getSchemas() {
        return schemas;
    }

    @JsonProperty("test")
    public Optional<Boolean> getTest() {
        return test;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof StartBulkSyncRequest && equalTo((StartBulkSyncRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(StartBulkSyncRequest other) {
        return fetchMode.equals(other.fetchMode)
                && resync.equals(other.resync)
                && schemas.equals(other.schemas)
                && test.equals(other.test);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.fetchMode, this.resync, this.schemas, this.test);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<BulkFetchMode> fetchMode = Optional.empty();

        private Optional<Boolean> resync = Optional.empty();

        private Optional<List<String>> schemas = Optional.empty();

        private Optional<Boolean> test = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(StartBulkSyncRequest other) {
            fetchMode(other.getFetchMode());
            resync(other.getResync());
            schemas(other.getSchemas());
            test(other.getTest());
            return this;
        }

        @JsonSetter(value = "fetch_mode", nulls = Nulls.SKIP)
        public Builder fetchMode(Optional<BulkFetchMode> fetchMode) {
            this.fetchMode = fetchMode;
            return this;
        }

        public Builder fetchMode(BulkFetchMode fetchMode) {
            this.fetchMode = Optional.of(fetchMode);
            return this;
        }

        @JsonSetter(value = "resync", nulls = Nulls.SKIP)
        public Builder resync(Optional<Boolean> resync) {
            this.resync = resync;
            return this;
        }

        public Builder resync(Boolean resync) {
            this.resync = Optional.of(resync);
            return this;
        }

        @JsonSetter(value = "schemas", nulls = Nulls.SKIP)
        public Builder schemas(Optional<List<String>> schemas) {
            this.schemas = schemas;
            return this;
        }

        public Builder schemas(List<String> schemas) {
            this.schemas = Optional.of(schemas);
            return this;
        }

        @JsonSetter(value = "test", nulls = Nulls.SKIP)
        public Builder test(Optional<Boolean> test) {
            this.test = test;
            return this;
        }

        public Builder test(Boolean test) {
            this.test = Optional.of(test);
            return this;
        }

        public StartBulkSyncRequest build() {
            return new StartBulkSyncRequest(fetchMode, resync, schemas, test, additionalProperties);
        }
    }
}
