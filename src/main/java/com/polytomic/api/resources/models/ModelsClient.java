/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.polytomic.api.resources.models;

import com.polytomic.api.core.ApiError;
import com.polytomic.api.core.ClientOptions;
import com.polytomic.api.core.MediaTypes;
import com.polytomic.api.core.ObjectMappers;
import com.polytomic.api.core.RequestOptions;
import com.polytomic.api.resources.models.requests.GetEnrichmentInputFieldsRequest;
import com.polytomic.api.resources.models.requests.ModelsCreateRequest;
import com.polytomic.api.resources.models.requests.ModelsGetRequest;
import com.polytomic.api.resources.models.requests.ModelsPreviewRequest;
import com.polytomic.api.resources.models.requests.ModelsRemoveRequest;
import com.polytomic.api.resources.models.requests.ModelsSampleRequest;
import com.polytomic.api.resources.models.requests.UpdateModelRequest;
import com.polytomic.api.types.ModelListResponseEnvelope;
import com.polytomic.api.types.ModelResponseEnvelope;
import com.polytomic.api.types.ModelSampleResponseEnvelope;
import com.polytomic.api.types.V2GetEnrichmentInputFieldsResponseEnvelope;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class ModelsClient {
    protected final ClientOptions clientOptions;

    public ModelsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * For a given connection and enrichment configuration, provides the valid sets of input fields.
     */
    public V2GetEnrichmentInputFieldsResponseEnvelope post(String connectionId) {
        return post(connectionId, GetEnrichmentInputFieldsRequest.builder().build());
    }

    /**
     * For a given connection and enrichment configuration, provides the valid sets of input fields.
     */
    public V2GetEnrichmentInputFieldsResponseEnvelope post(
            String connectionId, GetEnrichmentInputFieldsRequest request) {
        return post(connectionId, request, null);
    }

    /**
     * For a given connection and enrichment configuration, provides the valid sets of input fields.
     */
    public V2GetEnrichmentInputFieldsResponseEnvelope post(
            String connectionId, GetEnrichmentInputFieldsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/enrichment")
                .addPathSegment(connectionId)
                .addPathSegments("inputfields")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(
                        response.body().string(), V2GetEnrichmentInputFieldsResponseEnvelope.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public ModelResponseEnvelope preview(ModelsPreviewRequest request) {
        return preview(request, null);
    }

    public ModelResponseEnvelope preview(ModelsPreviewRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/model-preview");
        if (request.getAsync().isPresent()) {
            httpUrl.addQueryParameter("async", request.getAsync().get().toString());
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), ModelResponseEnvelope.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public ModelListResponseEnvelope list() {
        return list(null);
    }

    public ModelListResponseEnvelope list(RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/models")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), ModelListResponseEnvelope.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public ModelResponseEnvelope create(ModelsCreateRequest request) {
        return create(request, null);
    }

    public ModelResponseEnvelope create(ModelsCreateRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/models");
        if (request.getAsync().isPresent()) {
            httpUrl.addQueryParameter("async", request.getAsync().get().toString());
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), ModelResponseEnvelope.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public ModelResponseEnvelope get(String id) {
        return get(id, ModelsGetRequest.builder().build());
    }

    public ModelResponseEnvelope get(String id, ModelsGetRequest request) {
        return get(id, request, null);
    }

    public ModelResponseEnvelope get(String id, ModelsGetRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/models")
                .addPathSegment(id);
        if (request.getAsync().isPresent()) {
            httpUrl.addQueryParameter("async", request.getAsync().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), ModelResponseEnvelope.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public ModelResponseEnvelope update(String id, UpdateModelRequest request) {
        return update(id, request, null);
    }

    public ModelResponseEnvelope update(String id, UpdateModelRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/models")
                .addPathSegment(id);
        if (request.getAsync().isPresent()) {
            httpUrl.addQueryParameter("async", request.getAsync().get().toString());
        }
        Map<String, Object> properties = new HashMap<>();
        if (request.getAdditionalFields().isPresent()) {
            properties.put("additional_fields", request.getAdditionalFields());
        }
        properties.put("configuration", request.getConfiguration());
        properties.put("connection_id", request.getConnectionId());
        if (request.getEnricher().isPresent()) {
            properties.put("enricher", request.getEnricher());
        }
        if (request.getFields().isPresent()) {
            properties.put("fields", request.getFields());
        }
        if (request.getIdentifier().isPresent()) {
            properties.put("identifier", request.getIdentifier());
        }
        if (request.getLabels().isPresent()) {
            properties.put("labels", request.getLabels());
        }
        properties.put("name", request.getName());
        if (request.getOrganizationId().isPresent()) {
            properties.put("organization_id", request.getOrganizationId());
        }
        if (request.getPolicies().isPresent()) {
            properties.put("policies", request.getPolicies());
        }
        if (request.getRelations().isPresent()) {
            properties.put("relations", request.getRelations());
        }
        if (request.getTrackingColumns().isPresent()) {
            properties.put("tracking_columns", request.getTrackingColumns());
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), ModelResponseEnvelope.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public void remove(String id) {
        remove(id, ModelsRemoveRequest.builder().build());
    }

    public void remove(String id, ModelsRemoveRequest request) {
        remove(id, request, null);
    }

    public void remove(String id, ModelsRemoveRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/models")
                .addPathSegment(id);
        if (request.getAsync().isPresent()) {
            httpUrl.addQueryParameter("async", request.getAsync().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return;
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns sample records from the model. The first ten records that the source provides will be returned after being enriched (if applicable). Synchronous requests must complete within 10s. If either querying or enrichment exceeds 10s, please use the async option.
     */
    public ModelSampleResponseEnvelope sample(String id) {
        return sample(id, ModelsSampleRequest.builder().build());
    }

    /**
     * Returns sample records from the model. The first ten records that the source provides will be returned after being enriched (if applicable). Synchronous requests must complete within 10s. If either querying or enrichment exceeds 10s, please use the async option.
     */
    public ModelSampleResponseEnvelope sample(String id, ModelsSampleRequest request) {
        return sample(id, request, null);
    }

    /**
     * Returns sample records from the model. The first ten records that the source provides will be returned after being enriched (if applicable). Synchronous requests must complete within 10s. If either querying or enrichment exceeds 10s, please use the async option.
     */
    public ModelSampleResponseEnvelope sample(String id, ModelsSampleRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/models")
                .addPathSegment(id)
                .addPathSegments("sample");
        if (request.getAsync().isPresent()) {
            httpUrl.addQueryParameter("async", request.getAsync().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        try {
            Response response =
                    clientOptions.httpClient().newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), ModelSampleResponseEnvelope.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
